d-Heap operations:

- extract min
- insert
- find min O(1)
- remove(iter)
- sift-up O(log(d, n))
- sift-down O(d*log(d, n))

Свойства:

- корень - наименьшая из вершин
- все дети больше родителя

heap height = log(d, n), d - колиечство детей у вершины

SIFT-UP:
добавляя элемент а, будем поднимать его наверх до тех пор, пока родитель больше.
самое первое место, куда пытаемся вставить элемент, - это самая левая свободная ячейка(так индексы будут сохраняться)

SIFT-DOWN:
убирая элемент а, смотрим на его детей и свапаем с тем, который меньше, до тех пор, пока оба все дети не будут больше
(удаляя элемент, можно заменить его текущим самым правым)


листьев ~n/2, точно: n - 2^(height -1)

время построения кучи размером n d-арности

O(sum(h = 1 to log(d, n), d * h * n / d^h)) = O(d * n * sum(h / d^h))
S = sum(h / d^h) = sum(1/d * (h - 1)/ d^(h - 1) + d/(d-1)) = S/d + d/(d-1) 